AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  ApiDnsName:
    Type: String
    Description: 'The DNS name used for B2B rest API.'

  WebApiDnsName:
    Type: String
    Description: 'The DNS name used for WEB rest API.'

  IoApiDnsName:
    Type: String
    Description: 'The DNS name used for IO rest API.'

  CorsAllowedDomains:
    Type: String
    Description: 'Comma separated list of domains allowed to make cross origin request'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  DeliveryPushInputsQueueName:
    Type: String
    Description: 'Queue to pull for inputs event'

  DeliveryPushInputsQueueARN:
    Type: String
    Description: 'Queue to pull for inputs event'

  SandboxSafeStorageBaseUrl:
     Type: String
     Description: 'Url to the SafeStorage microservice'

  NotificationsDynamoTableName:
    Type: String
    Description: 'Notifications Dynamo table name'

  NotificationsDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing notifications'

  NotificationsDynamoTableStreamArn:
    Type: String
    Description: 'ARN of dynamodb table containing notifications streams'

  NotificationsCostDynamoTableName:
    Type: String
    Description: 'Notifications Cost Dynamo table name'

  NotificationsCostDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing notifications cost'

  NotificationsQRDynamoTableName:
    Type: String
    Description: 'Notifications QR Dynamo table name'

  NotificationsQRDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing notifications QR'

  NotificationsMetadataDynamoTableName:
    Type: String
    Description: 'NotificationsMetadata Dynamo table name'

  NotificationsMetadataDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing notifications metadata'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
  
  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  NotificationCheckAddress:
    Type: String
    Description: 'enables check on physical address when creating notification'
    AllowedValues: [true, false]
  
  LogsKinesisSourceStreamArn:
    Type: String
    Description: 'Kinesis stream that receive logs'

  DeliveryPushInputsQueueARN:
    Type: String
    Description: 'Target queue ARN for insert trigger'

  DeliveryPushInputsQueueURL:
    Type: String
    Description: 'Target queue URL for insert trigger'

  PnDeliveryInsertTriggerDLQName:
    Type: String
    Description: 'DLQ Name for insert trigger'

  PnDeliveryInsertTriggerDLQARN:
    Type: String
    Description: 'DLQ ARN for insert trigger'

  PnDeliveryInsertTriggerLambdaEventSourceMappingBatchSize:
    Type: String
    Description: 'BatchSize stream mapping'

  PnDeliveryInsertTriggerLambdaEventSourceMappingMaximumBatchingWindowInSeconds:
    Type: String
    Description: 'BatchWindow stream mapping'

  PnDeliveryInsertTriggerLambdaEventSourceMappingMaximumRetryAttempts:
    Type: String
    Description: 'MaxRetry stream mapping'


Resources:

  # PN-Delivery microservice
  DeliveryMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-delivery'
        CpuValue: 1024
        MemoryAmount: 2GB
        HealthCheckPath: /actuator/health
        HealthCheckTimeout: 15
        AutoscalingStrategy: REST-API
        AutoscalingThreshold: 70
        MinTasksNumber: 1
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'PN_DELIVERY_TOPICS_NEWNOTIFICATIONS=${DeliveryPushInputsQueueName}'
        #ContainerEnvEntry3: !Sub 'AWS_BUCKETNAME=${AttachmentsBucketName}'
        ContainerEnvEntry4: 'PN_DELIVERY_IUNRETRY=3'
        #ContainerEnvEntry5: !Sub 'SPRING_DATA_CASSANDRA_KEYSPACENAME=${KeyspaceName}'
        #ContainerEnvEntry6: 'SPRING_DATA_CASSANDRA_SSL=true'
        #ContainerEnvEntry7: !Sub 'SPRING_DATA_CASSANDRA_CONTACTPOINTS=cassandra.${AWS::Region}.${AWS::URLSuffix}:9142'
        ContainerEnvEntry8: !Sub 'CORS_ALLOWED_DOMAINS=${CorsAllowedDomains}'
        ContainerEnvEntry9: !Sub 'PN_DELIVERY_DELIVERYPUSHBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry10: !Sub 'PN_DELIVERY_NOTIFICATIONDAO_TABLENAME=${NotificationsDynamoTableName}'
        ContainerEnvEntry11: !Sub 'PN_DELIVERY_NOTIFICATIONMETADATADAO_TABLENAME=${NotificationsMetadataDynamoTableName}'
        ContainerEnvEntry12: !Sub 'PN_DELIVERY_NOTIFICATIONCOSTDAO_TABLENAME=${NotificationsCostDynamoTableName}'
        ContainerEnvEntry13: !Sub 'PN_DELIVERY_MANDATEBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry14: !Sub 'PN_DELIVERY_SAFESTORAGEBASEURL=${SandboxSafeStorageBaseUrl}'
        ContainerEnvEntry15: 'PN_DELIVERY_DATAVAULTBASEURL=http://alb.confidential.pn.internal:8080'
        ContainerEnvEntry16: 'PN_DELIVERY_SAFESTORAGECXID=pn-delivery'
        ContainerEnvEntry17: !Sub 'PN_DELIVERY_EXTERNALREGISTRIESBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry18: !Sub 'PN_DELIVERY_NOTIFICATIONCHECKADDRESS=${NotificationCheckAddress}'
        ContainerEnvEntry19: !Sub 'PN_DELIVERY_NOTIFICATIONQRDAO_TABLENAME=${NotificationsQRDynamoTableName}'
        JavaToolOptions: '-Dreactor.netty.ioWorkerCount=50 -XX:MaxMetaspaceSize=512M'
        MappedPaths: '/delivery/*,/delivery-private/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn

  # Grant operational rights to PN-Delivery microservice
  DeliveryMicroserviceTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-delivery-CustomTaskPolicy'
      Roles:
        - !GetAtt DeliveryMicroservice.Outputs.TaskRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
            Resource:
              - !Ref DeliveryPushInputsQueueARN
          - Effect: Allow
            Action:
              - 'dynamodb:GetItem'
              - 'dynamodb:Query'
              - 'dynamodb:PutItem'
            Resource:
              - !Sub "${NotificationsDynamoTableArn}"
              - !Sub "${NotificationsMetadataDynamoTableArn}"
              - !Sub "${NotificationsMetadataDynamoTableArn}/*"
              - !Sub "${NotificationsCostDynamoTableArn}"
              - !Sub "${NotificationsCostDynamoTableArn}/*"
              - !Sub "${NotificationsQRDynamoTableArn}"
              - !Sub "${NotificationsQRDynamoTableArn}/*"

  # Expose PN-Delivery microservice public API with API-GW for B2B usage
  DeliveryMicroservicePublicAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-delivery'
        IntendedUsage: B2B
        DnsName: !Ref ApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'delivery'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
  DeliveryMicroservicePublicApiWaf:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-waf-acl.yaml"
      Parameters:
        WAFName: !Sub '${ProjectName}-delivery-b2b'
        APIGatewayARNs: !GetAtt DeliveryMicroservicePublicAPI.Outputs.APIGatewayARN

  # Expose PN-Delivery microservice public API with API-GW for WEB usage
  DeliveryMicroservicePublicWebAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-delivery'
        IntendedUsage: WEB
        DnsName: !Ref WebApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'delivery'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
  DeliveryMicroservicePublicWebApiWaf:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-waf-acl.yaml"
      Parameters:
        WAFName: !Sub '${ProjectName}-delivery-web'
        APIGatewayARNs: !GetAtt DeliveryMicroservicePublicWebAPI.Outputs.APIGatewayARN
        Limit: 6000

  # Expose PN-Delivery microservice public API with API-GW for IO Backend usage
  DeliveryMicroservicePublicIoAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-delivery'
        IntendedUsage: IO
        DnsName: !Ref IoApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'delivery'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
  DeliveryMicroservicePublicIoApiWaf:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-waf-acl.yaml"
      Parameters:
        WAFName: !Sub '${ProjectName}-delivery-io'
        APIGatewayARNs: !GetAtt DeliveryMicroservicePublicIoAPI.Outputs.APIGatewayARN

  # Lambda function role
  PnDeliveryInsertTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-PnDeliveryInsertTriggerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ProjectName}-PnDeliveryInsertTriggerLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: WriteOnQueue
                Effect: Allow
                Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                Resource:
                  - !Ref DeliveryPushInputsQueueARN
                  - !Ref PnDeliveryInsertTriggerDLQARN
              - Sid: ReceiveDynamoStream
                Effect: Allow
                Action:
                  - "dynamodb:DescribeStream"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:ListStreams"
                Resource:
                  - !Ref NotificationsDynamoTableStreamArn
              - Sid: CanWriteLogs
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  PnDeliveryInsertTriggerLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Ref NotificationsDynamoTableStreamArn
      StartingPosition: LATEST
      BatchSize: !Sub ${PnDeliveryInsertTriggerLambdaEventSourceMappingBatchSize}
      MaximumBatchingWindowInSeconds: !Sub ${PnDeliveryInsertTriggerLambdaEventSourceMappingMaximumBatchingWindowInSeconds}
      MaximumRetryAttempts: !Sub ${PnDeliveryInsertTriggerLambdaEventSourceMappingMaximumRetryAttempts}
      FunctionName: !GetAtt PnDeliveryInsertTriggerLambda.Arn
       # Add an OnFailure destination on the event source mapping
      DestinationConfig:
        OnFailure:
          Destination: !Ref PnDeliveryInsertTriggerDLQARN

  PnDeliveryInsertTriggerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs16.x
      Description: ''
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt PnDeliveryInsertTriggerLambdaRole.Arn
      Environment:
        Variables:
          QUEUE_URL: !Ref DeliveryPushInputsQueueURL
      Code:
        ZipFile: |
              const AWS = require('aws-sdk')
              const sqs = new AWS.SQS();

              const QUEUE_URL = process.env.QUEUE_URL

              exports.handler = async (event) => {
                  console.log(JSON.stringify(event, null, 2));
                  console.log(QUEUE_URL);

                  for(var i = 0;i<event.Records.length;i++)
                  {
                      let record = event.Records[i];
                      if (record.eventName != 'INSERT')
                        continue;

                      console.log('Processing dynamoDB Record: %j', record.dynamodb);
                      const iun = record.dynamodb.Keys.iun.S;

                      if (iun.match(/^\S\S\S\S-\S\S\S\S-\S\S\S\S-\d\d\d\d\d\d-\S-\d$/)==null)
                        continue;

                      const senderPaId = record.dynamodb.NewImage.senderPaId.S;

                      var message = {
                        DelaySeconds: 0,
                        MessageGroupId: 'DELIVERY',
                        MessageDeduplicationId: iun + "_start",
                        MessageAttributes: {
                          "createdAt": {
                            DataType: "String",
                            StringValue: new Date().toISOString()
                          },
                          "eventId": {
                            DataType: "String",
                            StringValue: iun + "_start"
                          },
                          "eventType": {
                            DataType: "String",
                            StringValue: "NEW_NOTIFICATION"
                          },
                          "iun": {
                            DataType: "String",
                            StringValue: iun
                          },
                          "publisher": {
                            DataType: "String",
                            StringValue: "DELIVERY"
                          }
                        },
                        MessageBody: JSON.stringify({paId: senderPaId}),
                        QueueUrl: QUEUE_URL
                      };

                      console.log('Sending message: %j', message);
                      try{
                          let queueRes = await sqs.sendMessage(message).promise();
                          console.log("Sent message", queueRes.MessageId);
                      }catch(exc){
                          console.log("error sending message", exc)
                          throw exc;
                      }
                  }

                  const response = {
                      StatusCode: 200
                  };
                  return response;

              };
      #ENDpndeliveryinserttrigger
      #Non rimuovere o modificare il commento sopra, è usato come placeholder negli script

