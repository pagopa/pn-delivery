AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  ApiDnsName:
    Type: String
    Description: 'The DNS name used for B2B rest API.'

  WebApiDnsName:
    Type: String
    Description: 'The DNS name used for WEB rest API.'

  IoApiDnsName:
    Type: String
    Description: 'The DNS name used for IO rest API.'

  CorsAllowedDomains:
    Type: String
    Description: 'Comma separated list of domains allowed to make cross origin request'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  DeliveryPushInputsQueueName:
    Type: String
    Description: 'Queue to pull for inputs event'

  DeliveryPushInputsQueueARN:
    Type: String
    Description: 'Queue to pull for inputs event'

  #KeyspaceName:
  #  Type: String
  #  Description: 'Where to write database data'
  SandboxSafeStorageBaseUrl:
     Type: String
     Description: 'Url to the SafeStorage microservice'

  NotificationsDynamoTableName:
    Type: String
    Description: 'Notifications Dynamo table name'

  NotificationsDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing notifications'

  NotificationsCostDynamoTableName:
    Type: String
    Description: 'Notifications Cost Dynamo table name'

  NotificationsCostDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing notifications cost'

  NotificationsMetadataDynamoTableName:
    Type: String
    Description: 'NotificationsMetadata Dynamo table name'

  NotificationsMetadataDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing notifications metadata'

  AttachmentsBucketName:
    Type: String
    Description: 'Where to write documents files'

  AttachmentsBucketArn:
    Type: String
    Description: 'Where to write documents files'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
  
  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic


Resources:

  # PN-Delivery microservice
  DeliveryMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-delivery'
        CpuValue: 1024
        MemoryAmount: 2GB
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'PN_DELIVERY_TOPICS_NEWNOTIFICATIONS=${DeliveryPushInputsQueueName}'
        ContainerEnvEntry3: !Sub 'AWS_BUCKETNAME=${AttachmentsBucketName}'
        ContainerEnvEntry4: 'PN_DELIVERY_IUNRETRY=3'
        #ContainerEnvEntry5: !Sub 'SPRING_DATA_CASSANDRA_KEYSPACENAME=${KeyspaceName}'
        #ContainerEnvEntry6: 'SPRING_DATA_CASSANDRA_SSL=true'
        ContainerEnvEntry7: !Sub 'SPRING_DATA_CASSANDRA_CONTACTPOINTS=cassandra.${AWS::Region}.${AWS::URLSuffix}:9142'
        ContainerEnvEntry8: !Sub 'CORS_ALLOWED_DOMAINS=${CorsAllowedDomains}'
        ContainerEnvEntry9: !Sub 'PN_DELIVERY_DELIVERYPUSHBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry10: !Sub 'PN_DELIVERY_NOTIFICATIONDAO_TABLENAME=${NotificationsDynamoTableName}'
        ContainerEnvEntry11: !Sub 'PN_DELIVERY_NOTIFICATIONMETADATADAO_TABLENAME=${NotificationsMetadataDynamoTableName}'
        ContainerEnvEntry12: !Sub 'PN_DELIVERY_MANDATEBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry13: !Sub 'PN_DELIVERY_SAFESTORAGEBASEURL=${SandboxSafeStorageBaseUrl}'
        ContainerEnvEntry14: !Sub 'PN_DELIVERY_DATAVAULTBASEURL=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry15: 'PN_DELIVERY_SAFESTORAGECXID=pn-delivery'
        MappedPaths: '/delivery/*,/delivery-private/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber

  # Grant operational rights to PN-Delivery microservice
  DeliveryMicroserviceTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-delivery-CustomTaskPolicy'
      Roles:
        - !GetAtt DeliveryMicroservice.Outputs.TaskRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:ChangeMessageVisibilityBatch
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - !Ref DeliveryPushInputsQueueARN
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:GetObjectLegalHold
              - s3:GetObjectRetention
              - s3:GetObjectTagging
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Resource:
              - !Sub '${AttachmentsBucketArn}/*'
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !Ref AttachmentsBucketArn
          - Effect: Allow
            Action:
              - cassandra:Modify
              - cassandra:Select
            Resource:
              - !Sub "arn:aws:cassandra:*:${AWS::AccountId}:/keyspace/*/table/*"
          - Effect: Allow
            Action:
              - 'dynamodb:GetItem'
              - 'dynamodb:Query'
              - 'dynamodb:PutItem'
            Resource:
              - !Sub "${NotificationsDynamoTableArn}"
              - !Sub "${NotificationsMetadataDynamoTableArn}"
              - !Sub "${NotificationsMetadataDynamoTableArn}/*"



  # Expose PN-Delivery microservice public API with API-GW for B2B usage
  DeliveryMicroservicePublicAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-delivery'
        IntendedUsage: B2B
        DnsName: !Ref ApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'delivery'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain

  # Expose PN-Delivery microservice public API with API-GW for WEB usage
  DeliveryMicroservicePublicWebAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-delivery'
        IntendedUsage: WEB
        DnsName: !Ref WebApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'delivery'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain

# Expose PN-Delivery microservice public API with API-GW for IO Backend usage
  DeliveryMicroservicePublicIoAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-delivery'
        IntendedUsage: IO
        DnsName: !Ref IoApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'delivery'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain